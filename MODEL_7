import pandas as pd
import numpy as np
from pathlib import Path
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.callbacks import EarlyStopping
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import TimeSeriesSplit

# 定义数据路径
base_path = Path("D:/X-HEC/python for data science/pre/msdb-2024")

# 加载数据
train = pd.read_parquet(base_path / "train.parquet")
test = pd.read_parquet(base_path / "final_test.parquet")
external = pd.read_csv(base_path / "external.csv")

# 将日期列转换为 datetime 类型
train['date'] = pd.to_datetime(train['date'])
test['date'] = pd.to_datetime(test['date'])
external['date'] = pd.to_datetime(external['date'], format='%Y/%m/%d %H:%M')

# 添加时间特征
def add_time_features(df):
    df['hour'] = df['date'].dt.hour
    df['weekday'] = df['date'].dt.weekday
    df['month'] = df['date'].dt.month
    df['is_weekend'] = (df['weekday'] >= 5).astype(int)
    return df

train = add_time_features(train)
test = add_time_features(test)

# 计算安装时间（单位：天）
train['installation_days'] = (train['date'] - pd.to_datetime(train['counter_installation_date'])).dt.days
test['installation_days'] = (test['date'] - pd.to_datetime(test['counter_installation_date'])).dt.days

# 合并天气数据
train = train.merge(external, on='date', how='left')
test = test.merge(external, on='date', how='left')

# 所有天气相关特征（包括新增特征）
weather_features = [
    't', 'vv', 'rr3', 'n', 'pres', 'tend24', 'raf10',
    'td', 'ww', 'rafper', 'rr1', 'rr6', 'rr12', 'rr24'
]

# 填充新增天气数据的缺失值
for feature in weather_features:
    train[feature] = train[feature].fillna(train[feature].mean())
    test[feature] = test[feature].fillna(test[feature].mean())

# 标准化所有天气特征
scaler = StandardScaler()
train[weather_features] = scaler.fit_transform(train[weather_features])
test[weather_features] = scaler.transform(test[weather_features])

# 添加滞后和滚动特征
train['lag_1'] = train.groupby('counter_id', observed=False)['log_bike_count'].shift(1)
train['rolling_mean_24h'] = train.groupby('counter_id', observed=False)['log_bike_count'].transform(lambda x: x.rolling(24).mean())

# 填充滞后特征的缺失值
train['lag_1'] = train['lag_1'].fillna(0)
train['rolling_mean_24h'] = train['rolling_mean_24h'].fillna(0)

# 更新特征选择（将新增特征加入到 features 中）
features = [
    'hour', 'weekday', 'month', 'is_weekend', 'installation_days',
    'lag_1', 'rolling_mean_24h',
    # 加入所有天气相关特征
    't', 'vv', 'rr3', 'n', 'pres', 'tend24', 'raf10',
    'td', 'ww', 'rafper', 'rr1', 'rr6', 'rr12', 'rr24'
]
target = 'log_bike_count'

# 准备LSTM所需的滑动窗口数据
def create_lstm_dataset(data, time_steps=1):
    Xs, ys = [], []
    for i in range(len(data) - time_steps):
        v = data[i:(i + time_steps)].values
        Xs.append(v)
        ys.append(data[target].values[i + time_steps])
    return np.array(Xs), np.array(ys)

time_steps = 24  # 使用过去24小时的数据作为输入
X_train, y_train = create_lstm_dataset(train[features + [target]], time_steps)

# 构建LSTM模型
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# 时间序列交叉验证
tscv = TimeSeriesSplit(n_splits=5)

best_rmse = float('inf')
best_model = None

for train_idx, val_idx in tscv.split(X_train):
    X_train_cv, X_val_cv = X_train[train_idx], X_train[val_idx]
    y_train_cv, y_val_cv = y_train[train_idx], y_train[val_idx]

    history = model.fit(
        X_train_cv, y_train_cv,
        validation_data=(X_val_cv, y_val_cv),
        epochs=100,
        batch_size=32,
        callbacks=[early_stopping],
        verbose=0
    )

    y_pred_val = model.predict(X_val_cv)
    rmse = np.sqrt(mean_squared_error(y_val_cv, y_pred_val.flatten()))
    
    print(f"Validation RMSE: {rmse}")
    
    if rmse < best_rmse:
        best_rmse = rmse
        best_model = model

print(f"Best Validation RMSE: {best_rmse}")

# 测试集预测（非递归预测）
# 测试集预测（非递归预测）
test['log_bike_count'] = 0.0

unique_counters = test['counter_id'].unique()

for counter_id in unique_counters:
    print(f"Processing counter_id: {counter_id}")  # 调试信息
    test_counter = test[test['counter_id'] == counter_id].copy()
    train_counter = train[train['counter_id'] == counter_id].copy()

    if not train_counter.empty:
        # 使用训练集中最后一条记录的滞后特征
        last_log_bike_count = float(train_counter['log_bike_count'].iloc[-1])
        
        # 添加滞后特征和滚动平均特征到测试集中
        test_counter['lag_1'] = last_log_bike_count
        test_counter['rolling_mean_24h'] = train_counter['log_bike_count'].rolling(24, min_periods=1).mean().iloc[-1]

        # 确保测试集中包含所有必要的特征
        for feature in features:
            if feature not in test_counter.columns:
                test_counter[feature] = 0  # 或者使用其他合适的填充值

        # 创建测试集的滑动窗口
        last_train_records = train_counter.tail(time_steps)[features].values
        test_counter_features = np.vstack([last_train_records, test_counter[features].values])
        X_test = np.array([test_counter_features[i:i+time_steps] for i in range(len(test_counter))])

        # 进行批量预测
        predicted_log_bike_count = best_model.predict(X_test)
        test_counter['log_bike_count'] = predicted_log_bike_count.flatten()
    
    test.loc[test['counter_id'] == counter_id, 'log_bike_count'] = test_counter['log_bike_count']

test['bike_count'] = np.exp(test['log_bike_count'])

# 保存结果
submission = test[['counter_id', 'counter_name', 'site_id', 'site_name', 'date', 'log_bike_count']]
submission.to_csv(base_path / "submission.csv", index=False)

print("预测结果已保存为 submission.csv 文件")