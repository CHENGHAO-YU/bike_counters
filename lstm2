import pandas as pd
import numpy as np
from pathlib import Path
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout
from keras.callbacks import EarlyStopping

# 定义数据路径
base_path = Path("D:/X-HEC/python for data science/pre/msdb-2024")

# 加载数据
train = pd.read_parquet(base_path / "train.parquet")
test = pd.read_parquet(base_path / "final_test.parquet")
external = pd.read_csv(base_path / "external.csv")

# 将日期列转换为 datetime 类型
train['date'] = pd.to_datetime(train['date'])
test['date'] = pd.to_datetime(test['date'])
external['date'] = pd.to_datetime(external['date'], format='%Y/%m/%d %H:%M')

# 添加时间特征
def add_time_features(df):
    df['hour'] = df['date'].dt.hour
    df['weekday'] = df['date'].dt.weekday
    df['month'] = df['date'].dt.month
    df['is_weekend'] = (df['weekday'] >= 5).astype(int)
    return df

train = add_time_features(train)
test = add_time_features(test)

# 计算安装时间（单位：天）
train['installation_days'] = (train['date'] - pd.to_datetime(train['counter_installation_date'])).dt.days
test['installation_days'] = (test['date'] - pd.to_datetime(test['counter_installation_date'])).dt.days

# 合并天气数据
train = train.merge(external, on='date', how='left')
test = test.merge(external, on='date', how='left')

# 所有天气相关特征（包括新增特征）
weather_features = [
    't', 'vv', 'rr3', 'n', 'pres', 'tend24', 'raf10',
    'td', 'ww', 'rafper', 'rr1', 'rr6', 'rr12', 'rr24'
]

# 填充新增天气数据的缺失值
for feature in weather_features:
    train[feature] = train[feature].fillna(train[feature].mean())
    test[feature] = test[feature].fillna(test[feature].mean())

# 标准化所有天气特征
scaler = StandardScaler()
train[weather_features] = scaler.fit_transform(train[weather_features])
test[weather_features] = scaler.transform(test[weather_features])

# 添加滞后和滚动特征
train['lag_1'] = train.groupby('counter_id', observed=False)['log_bike_count'].shift(1)
train['rolling_mean_24h'] = train.groupby('counter_id', observed=False)['log_bike_count'].transform(lambda x: x.rolling(24).mean())

# 填充滞后特征的缺失值
train['lag_1'] = train['lag_1'].fillna(0)
train['rolling_mean_24h'] = train['rolling_mean_24h'].fillna(0)

# 更新特征选择（将新增特征加入到 features 中）
features = [
    'hour', 'weekday', 'month', 'is_weekend', 'installation_days',
    'lag_1', 'rolling_mean_24h',
    # 加入所有天气相关特征
    't', 'vv', 'rr3', 'n', 'pres', 'tend24', 'raf10',
    'td', 'ww', 'rafper', 'rr1', 'rr6', 'rr12', 'rr24'
]
target = 'log_bike_count'

# 创建时间步长函数
def create_time_steps(data, target_series, time_steps=24):
    Xs, ys = [], []
    for i in range(len(data) - time_steps):
        v = data[i:(i + time_steps)].values
        Xs.append(v)
        ys.append(target_series.iloc[i + time_steps])
    return np.array(Xs), np.array(ys)

# 准备训练集的时间步长数据
time_steps = 24
X_train, y_train = create_time_steps(train[features], train[target], time_steps)

# 定义LSTM模型
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_steps, len(features))))
model.add(Dropout(0.2))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mse')

early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# 训练模型
history = model.fit(
    X_train, y_train,
    validation_split=0.2,  # 使用20%的数据作为验证集
    epochs=1,
    batch_size=32,
    callbacks=[early_stopping],
    verbose=1
)

# 添加滞后和滚动特征到测试集中
def add_lag_and_rolling_features(df, train_df, target_col='log_bike_count', time_steps=24):
    df['lag_1'] = df.groupby('counter_id', observed=False)[target_col].shift(1)
    df['rolling_mean_24h'] = df.groupby('counter_id', observed=False)[target_col].transform(lambda x: x.rolling(time_steps).mean())
    
    # 填充滞后特征的缺失值
    df['lag_1'] = df['lag_1'].fillna(0)
    df['rolling_mean_24h'] = df['rolling_mean_24h'].fillna(0)
    
    return df

# 在测试数据中添加滞后和滚动特征，使用训练数据的最后一行作为初始值
for counter_id in test['counter_id'].unique():
    if not train[train['counter_id'] == counter_id].empty:
        last_entry = train[train['counter_id'] == counter_id][[target] + features].tail(1)
        test_counter = test[test['counter_id'] == counter_id].copy()
        
        # 合并最后一行训练数据与测试数据，以便计算滞后和滚动特征
        combined = pd.concat([last_entry, test_counter], ignore_index=True)
        combined = add_lag_and_rolling_features(combined, combined, target_col=target)
        
        # 更新测试数据中的滞后和滚动特征
        test.loc[test['counter_id'] == counter_id, ['lag_1', 'rolling_mean_24h']] = combined[['lag_1', 'rolling_mean_24h']].iloc[1:].values

# 批量预测函数
def batch_predict(model, test_data, train_data, features, target, time_steps):
    predictions = []
    for counter_id in test_data['counter_id'].unique():
        test_counter = test_data[test_data['counter_id'] == counter_id].copy()
        if not train_data[train_data['counter_id'] == counter_id].empty:
            last_entries = train_data[train_data['counter_id'] == counter_id][features + [target]].tail(time_steps)
            samples = []
            indices = []
            for i in range(len(test_counter)):
                if len(last_entries) < time_steps:
                    break
                sample = last_entries[features].values[-time_steps:]
                samples.append(sample)
                indices.append(test_counter.index[i])
                
                new_entry = test_counter.iloc[[i]][features]
                last_entries = pd.concat([last_entries, new_entry], ignore_index=True).tail(time_steps)
            
            if samples:
                samples_array = np.array(samples).reshape((-1, time_steps, len(features)))
                predicted_log_bike_counts = model.predict(samples_array, verbose=0)
                for idx, pred in zip(indices, predicted_log_bike_counts):
                    predictions.append((idx, pred.flatten()[0]))
    
    return predictions

# 进行批量预测
predictions = batch_predict(model, test, train, features, target, time_steps)

# 更新测试数据中的预测结果
for idx, pred in predictions:
    test.loc[idx, 'log_bike_count'] = pred

test['bike_count'] = np.exp(test['log_bike_count'])

# 保存结果
submission = test[['counter_id', 'counter_name', 'site_id', 'site_name', 'date', 'log_bike_count']]
submission.to_csv(base_path / "submission_lstm.csv", index=False)

print("LSTM 预测结果已保存为 submission_lstm.csv 文件")